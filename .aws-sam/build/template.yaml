AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: BNG Backend API
Globals:
  Function:
    Timeout: 29
    MemorySize: 512
    Environment:
      Variables:
        NODE_ENV:
          Ref: Environment
        DB_HOST:
          Fn::GetAtt:
          - PostgresRDSInstance
          - Endpoint.Address
        DB_PORT:
          Fn::GetAtt:
          - PostgresRDSInstance
          - Endpoint.Port
        DB_USERNAME:
          Ref: DBUsername
        DB_PASSWORD:
          Ref: DBPassword
        DB_DATABASE:
          Ref: DBDatabase
        DB_NAME:
          Ref: DBName
        JWT_EXPIRES_IN:
          Ref: JWTExpiresIn
        DEPLOY_VERSION: 1.0.0
  HttpApi:
    CorsConfiguration:
      AllowOrigins:
      - http://localhost:3000
      - https://app.bnglogisticsnetwork.com
      AllowHeaders:
      - Content-Type
      - Authorization
      - X-Requested-With
      - Accept
      - Origin
      - Access-Control-Request-Method
      - Access-Control-Request-Headers
      - Apollo-Require-Preflight
      AllowMethods:
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
      - HEAD
      - PATCH
      AllowCredentials: true
      ExposeHeaders:
      - Access-Control-Allow-Origin
      - Access-Control-Allow-Credentials
      MaxAge: 300
Parameters:
  Environment:
    Type: String
    Default: development
  DBUsername:
    Type: String
    Default: postgres
  DBPassword:
    Type: String
    NoEcho: true
    Default: BNG_password123!
  DBDatabase:
    Type: String
    Default: db_bng_new
  DBName:
    Type: String
    Default: db_bng_new
  JWTExpiresIn:
    Type: String
    Default: 24h
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: BNG-VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: BNG-Public-Subnet-1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: BNG-Public-Subnet-2
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: BNG-Public-RouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  PostgresDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: postgres16
      Description: Parameter group for PostgreSQL RDS
      Parameters:
        rds.force_ssl: 0
  PostgresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable PostgreSQL access
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId:
          Ref: LambdaSecurityGroup
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId:
        Ref: VPC
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: '0.0.0.0/0'
  PostgresSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for PostgreSQL RDS
      SubnetIds:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
  PostgresRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName:
        Ref: DBDatabase
      Engine: postgres
      EngineVersion: 16.6
      MasterUsername:
        Ref: DBUsername
      MasterUserPassword:
        Ref: DBPassword
      DBInstanceClass: db.t3.micro
      AllocatedStorage: '20'
      VPCSecurityGroups:
      - Ref: PostgresSecurityGroup
      DBSubnetGroupName:
        Ref: PostgresSubnetGroup
      PubliclyAccessible: true
      Port: 5432
      DBParameterGroupName:
        Ref: PostgresDBParameterGroup
  CoreDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: core-dependencies-layer
      Description: Core and base dependencies including NestJS
      ContentUri: ../../layers/core-dependencies/nodejs
      CompatibleRuntimes:
      - nodejs18.x
      CompatibleArchitectures:
      - arm64
      RetentionPolicy: Retain
  GraphQLDBLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: graphql-db-layer
      Description: GraphQL and Database related dependencies
      ContentUri: ../../layers/graphql-db/nodejs
      CompatibleRuntimes:
      - nodejs18.x
      CompatibleArchitectures:
      - arm64
      RetentionPolicy: Retain
  AuthUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: auth-utils-layer
      Description: Authentication and utility dependencies
      ContentUri: ../../layers/auth-utils/nodejs
      CompatibleRuntimes:
      - nodejs18.x
      CompatibleArchitectures:
      - arm64
      RetentionPolicy: Retain
  AwsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: aws-layer
      Description: AWS SDK and related dependencies
      ContentUri: ../../layers/aws/nodejs
      CompatibleRuntimes:
      - nodejs18.x
      CompatibleArchitectures:
      - arm64
      RetentionPolicy: Retain
  BngFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BngFunction
      Handler: dist/lambda.handler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      Policies:
      - VPCAccessPolicy: {}
      - Statement:
        - Effect: Allow
          Action:
          - ec2:CreateNetworkInterface
          - ec2:DeleteNetworkInterface
          - ec2:DescribeNetworkInterfaces
          Resource: '*'
      Environment:
        Variables:
          DB_HOST:
            Fn::GetAtt:
            - PostgresRDSInstance
            - Endpoint.Address
          DB_PORT:
            Fn::GetAtt:
            - PostgresRDSInstance
            - Endpoint.Port
          DB_USERNAME:
            Ref: DBUsername
          DB_PASSWORD:
            Ref: DBPassword
          DB_DATABASE:
            Ref: DBDatabase
          DB_NAME:
            Ref: DBName
          JWT_EXPIRES_IN:
            Ref: JWTExpiresIn
          NODE_ENV:
            Ref: Environment
          DEPLOY_VERSION: 1.0.0
          STAGE: Prod
      Layers:
      - Ref: CoreDependenciesLayer
      - Ref: GraphQLDBLayer
      - Ref: AuthUtilsLayer
      - Ref: AwsLayer
      Events:
        GraphQLEvent:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: BngHttpApi
            Path: /graphql
            Method: POST
            PayloadFormatVersion: '2.0'
        GraphQLGet:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: BngHttpApi
            Path: /graphql
            Method: GET
            PayloadFormatVersion: '2.0'
        ProxyApiEvent:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: BngHttpApi
            Path: /{proxy+}
            Method: ANY
            PayloadFormatVersion: '2.0'
    Metadata:
      SamResourceId: BngFunction
  ApiGatewayCloudWatchRoleUnique:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGatewayUnique:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/apigateway/${AWS::StackName}-api
      RetentionInDays: 7
  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: BngFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BngHttpApi}/*
  BngHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      AccessLogSettings:
        DestinationArn:
          Fn::GetAtt:
          - ApiGatewayLogGroup
          - Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod",
          "routeKey":"$context.routeKey", "status":"$context.status", "protocol":"$context.protocol",
          "responseLength":"$context.responseLength", "error": "$context.error.message"
          }'
Outputs:
  GraphQLEndpoint:
    Description: GraphQL endpoint URL
    Value:
      Fn::Sub: https://${BngHttpApi}.execute-api.${AWS::Region}.amazonaws.com/graphql
  WebEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${BngHttpApi}.execute-api.${AWS::Region}.amazonaws.com/
  RDSEndpoint:
    Description: RDS instance endpoint
    Value:
      Fn::GetAtt:
      - PostgresRDSInstance
      - Endpoint.Address
  RDSPort:
    Description: RDS instance port
    Value:
      Fn::GetAtt:
      - PostgresRDSInstance
      - Endpoint.Port
